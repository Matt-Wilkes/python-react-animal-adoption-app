"""update Animal id to use uuid

Revision ID: 1df2abed1930
Revises: 86b517d230a9
Create Date: 2025-07-14 13:50:00.861701

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1df2abed1930'
down_revision = '86b517d230a9'
branch_labels = None
depends_on = None


def upgrade():
    
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('animals', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id_temp', postgresql.UUID(), nullable=True))
        
    op.execute('UPDATE animals SET id_temp = uuid_generate_v4()')
        
    op.drop_constraint('animals_pkey', 'animals', type_='primary')
        
    with op.batch_alter_table('animals', schema=None) as batch_op:
        batch_op.drop_column('id')
        
        batch_op.alter_column('id_temp', new_column_name='id')
        
        batch_op.alter_column('id', nullable=False)
    
    op.create_primary_key('animals_pkey', 'animals', ['id'])

    with op.batch_alter_table('shelters', schema=None) as batch_op:
        batch_op.add_column(sa.Column('domain', sa.String(length=50), nullable=True))
        
    op.execute("""
        UPDATE shelters 
        SET domain = SUBSTRING(email FROM '@(.*)$')
        WHERE email IS NOT NULL AND email LIKE '%@%'
    """)
    
    with op.batch_alter_table('shelters', schema=None) as batch_op:
        batch_op.alter_column('domain', nullable=False)
        batch_op.create_unique_constraint(None, ['domain'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('shelters', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('domain')
    
    op.drop_constraint('animals_pkey', 'animals', type_='primary')

    with op.batch_alter_table('animals', schema=None) as batch_op:
        
        batch_op.add_column(sa.Column('id_temp', sa.INTEGER(), nullable=True))
        
    op.execute('''
            UPDATE animals
            SET id_temp = (
                SELECT row_number() OVER (ORDER BY id)
                FROM (SELECT DISTINCT id FROM animals) t
                WHERE t.id = animals.id
            )
        ''')
        
    with op.batch_alter_table('animals', schema=None) as batch_op:
        batch_op.drop_column('id')
        batch_op.alter_column('id_temp', new_column_name='id')
        batch_op.alter_column('id', nullable=False)
    
    op.create_primary_key('animals_pkey', 'animals', ['id'])
    op.execute('CREATE SEQUENCE animals_id_seq OWNED BY animals.id')
    op.execute('ALTER TABLE animals ALTER COLUMN id SET DEFAULT nextval(\'animals_id_seq\')')
        

    # ### end Alembic commands ###
